import type { Recommendation, SimulationInputs } from './types';

interface CalendarMilestone {
  time: Date;
  title: string;
  description: string;
}

export function generateCalendarEvent(
  recommendation: Recommendation,
  simulationInputs: SimulationInputs
): string {
  const { optimalLeaveTime, debugInfo } = recommendation;
  const { tripContext, travelEstimate } = simulationInputs;

  // Calculate milestone times (all relative to departure)
  const departureTime = tripContext.flightTime;
  const doorCloseTime = new Date(departureTime.getTime() - tripContext.doorCloseMin * 60000);
  const boardingStartTime = new Date(departureTime.getTime() - tripContext.boardingStartMin * 60000);

  // Estimate when user arrives at airport (leave time + travel time average)
  const avgTravelMin = (travelEstimate.minMinutes + travelEstimate.maxMinutes) / 2;
  const parkingMin = travelEstimate.parkingToTerminalMin || 0;
  const arriveAirportTime = new Date(
    optimalLeaveTime.getTime() + (avgTravelMin + parkingMin) * 60000
  );

  // Estimate when user reaches security (after parking/curb to security walk)
  const curbToSecurityMin = tripContext.isFamiliarAirport ? 5 : 25;
  const arriveSecurityTime = new Date(
    arriveAirportTime.getTime() + curbToSecurityMin * 60000
  );

  // Estimate when user clears security (using debug info)
  const avgSecurityMin = debugInfo?.components?.security || 20;
  const clearSecurityTime = new Date(
    arriveSecurityTime.getTime() + avgSecurityMin * 60000
  );

  // Build description with milestones
  const milestones: CalendarMilestone[] = [
    {
      time: optimalLeaveTime,
      title: 'üè† Leave Home',
      description: `Start your journey (${travelEstimate.minMinutes}-${travelEstimate.maxMinutes} min travel time)`,
    },
    {
      time: arriveAirportTime,
      title: travelEstimate.mode === 'driving' ? 'üÖøÔ∏è Arrive & Park' : 'üöó Arrive at Airport',
      description:
        travelEstimate.mode === 'driving'
          ? `Park and walk to terminal (~${parkingMin} min)`
          : 'Dropped off at terminal',
    },
    {
      time: arriveSecurityTime,
      title: 'üëÆ Reach Security Checkpoint',
      description: tripContext.hasPreCheck
        ? 'TSA PreCheck lane'
        : tripContext.hasClear
        ? 'CLEAR + Standard security'
        : 'Standard security line',
    },
    {
      time: clearSecurityTime,
      title: '‚úÖ Clear Security',
      description: `Proceed to gate (estimated ${avgSecurityMin} min)`,
    },
    {
      time: boardingStartTime,
      title: 'üé´ Boarding Starts',
      description: `Boarding begins for ${tripContext.flightType} flight`,
    },
    {
      time: doorCloseTime,
      title: 'üö™ Door Closes',
      description: 'Final call - doors closing',
    },
    {
      time: departureTime,
      title: '‚úàÔ∏è Departure',
      description: `Flight departs from ${tripContext.airport.name}`,
    },
  ];

  // Format milestones for calendar description
  const formatTime = (date: Date) => {
    return date.toLocaleTimeString('en-US', {
      hour: 'numeric',
      minute: '2-digit',
      hour12: true,
    });
  };

  const milestonesText = milestones
    .map((m) => `${formatTime(m.time)} - ${m.title}\n${m.description}`)
    .join('\n\n');

  // Generate ICS format
  const eventTitle = `‚úàÔ∏è ${tripContext.airport.code} Flight - Leave by ${formatTime(optimalLeaveTime)}`;
  const eventDescription = `FLIGHT PREPARATION TIMELINE\\n\\n${milestonesText.replace(
    /\n/g,
    '\\n'
  )}\\n\\n---\\nGenerated by When To Go\\nhttps://whentogo.app`;

  // ICS file format
  const ics = `BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//When To Go//Airport Timing//EN
CALSCALE:GREGORIAN
METHOD:PUBLISH
BEGIN:VEVENT
DTSTART:${formatICSDate(optimalLeaveTime)}
DTEND:${formatICSDate(departureTime)}
SUMMARY:${eventTitle}
DESCRIPTION:${eventDescription}
LOCATION:${tripContext.airport.name} (${tripContext.airport.code})
STATUS:CONFIRMED
SEQUENCE:0
BEGIN:VALARM
TRIGGER:-PT30M
DESCRIPTION:Leave for airport in 30 minutes
ACTION:DISPLAY
END:VALARM
BEGIN:VALARM
TRIGGER:-PT15M
DESCRIPTION:Leave for airport in 15 minutes!
ACTION:DISPLAY
END:VALARM
BEGIN:VALARM
TRIGGER:-PT5M
DESCRIPTION:Time to leave for airport NOW!
ACTION:DISPLAY
END:VALARM
END:VEVENT
END:VCALENDAR`;

  return ics;
}

function formatICSDate(date: Date): string {
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');
  const seconds = String(date.getSeconds()).padStart(2, '0');

  return `${year}${month}${day}T${hours}${minutes}${seconds}`;
}

export function downloadCalendarEvent(
  recommendation: Recommendation,
  simulationInputs: SimulationInputs
): void {
  const icsContent = generateCalendarEvent(recommendation, simulationInputs);
  const blob = new Blob([icsContent], { type: 'text/calendar;charset=utf-8' });
  const url = URL.createObjectURL(blob);
  const link = document.createElement('a');
  link.href = url;
  link.download = `airport-departure-${simulationInputs.tripContext.airport.code}-${Date.now()}.ics`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
}
